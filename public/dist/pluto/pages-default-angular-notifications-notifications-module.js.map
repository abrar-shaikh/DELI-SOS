{"version":3,"sources":["webpack:///./src/app/theme/pages/default/angular/notifications/notifications.component.css","webpack:///./src/app/theme/pages/default/angular/notifications/notifications.component.html","webpack:///./src/app/theme/pages/default/angular/notifications/notifications.component.ts","webpack:///./src/app/theme/pages/default/angular/notifications/notifications.module.ts","webpack:///./src/app/theme/pages/default/angular/notifications/notifications.routing.ts","webpack:///./src/app/theme/pages/default/angular/notifications/notifications.service.ts"],"names":[],"mappings":"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","file":"pages-default-angular-notifications-notifications-module.js","sourcesContent":["module.exports = \".headers{\\n   font-size: 20px\\n}\"","module.exports = \"<h2 class=\\\"header\\\">Notifications</h2>\\n\\n\\n<div class=\\\"table-responsive\\\">\\n  <table class=\\\"table\\\">\\n    <thead>\\n      <tr class=\\\"headers\\\">\\n        <th>Name</th>\\n        <th>Content</th>\\n        <th>Flag</th>\\n        <th>Status</th>\\n        <th>Action</th>\\n      </tr>\\n    </thead>\\n    <tbody>\\n\\n      <tr *ngFor=\\\"let notify of notificationList; let i=index\\\">\\n        <td> {{notify.name}}</td>\\n        <td>{{notify.content}}</td>\\n        <td>{{notify.flag}}</td>\\n        <td>{{notify.isActive}}</td>\\n        <td>\\n          <button type=\\\"button\\\" class=\\\"btn-edit\\\">\\n            <i class=\\\"fas fa-edit\\\" (click)=\\\"updateNotificationModel(notify)\\\"></i>\\n          </button> &nbsp;&nbsp;\\n        </td>\\n      </tr>\\n    </tbody>\\n  </table>\\n</div>\"","import { Component, OnInit, Output, EventEmitter, Input } from '@angular/core';\nimport { NotificationService } from './notifications.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { FormBuilder, Validators, FormControl, FormGroup, FormArray } from '@angular/forms';\nimport { Location } from '@angular/common';\nimport { ToastrService } from 'ngx-toastr';\nimport { NgbActiveModal, NgbModal } from '@ng-bootstrap/ng-bootstrap';\n\n\n// @Component({\n//   selector: 'app-user',\n//   template: ` <div class=\"modal-header\">\n//   <h4 class=\"modal-title\">{{ isAdd ? 'Add' : 'Edit'}} Notification</h4>\n//   <button type=\"button\" class=\"close\" aria-label=\"Close\" (click)=\"activeModal.dismiss('Cross click')\">\n//     <span aria-hidden=\"true\">&times;</span>\n//   </button>\n// </div>\n// <div class=\"modal-body\">\n// <form [formGroup]=\"notificationForm\" (ngSubmit)=\"addNotification()\">\n//             <div class=\"form-group\">\n//                 <label for=\"name\">Name</label>\n//                 <input type=\"text\" formControlName=\"name\" [(ngModel)]=\"name\" class=\"form-control\"/>\n//                 <span *ngIf=\"notificationForm.controls.name.errors?.required\" class=\"lbl-err\">Name is required.</span>\n                \n//             </div>\n//             <div class=\"form-group\">\n//                 <label for=\"content\">Content</label>\n//                 <input type=\"text\" formControlName=\"content\" [(ngModel)]=\"content\" class=\"form-control\" />\n//                 <span *ngIf=\"notificationForm.controls.content.errors?.required\" class=\"lbl-err\">content is required.</span>\n                \n//             </div>\n//             <div class=\"form-group\">\n//                 <label for=\"flag\">Flag</label>\n//                 <input type=\"flag\" formControlName=\"flag\"  [(ngModel)]=\"flag\" class=\"form-control\"/>\n//                 <span *ngIf=\"notificationForm.controls.flag.errors?.required\" class=\"lbl-err\">flag is required.</span>\n                \n//             </div>\n        \n//            <div class=\"modal-footer\">\n//             <div class=\"form-group\">\n\n//             <button type=\"submit\"  class=\"btn btn-outline-dark\" [disabled]=\"validateForm()\">Save</button>\n//             <button type=\"button\" class=\"btn btn-outline-dark\" (click)=\"activeModal.close('Close click')\">Cancel</button>\n            \n//             </div>\n//          </div>\n//         </form>`,\n//   styleUrls: ['./notifications.component.css']\n// })\n\n// export class NgbdModalContent {\n//   notificationList: Array<any>;\n//   notificationForm: FormGroup;\n\n//   @Input() id;\n//   @Input() fullName;\n//   @Input() gender;\n//   loading = false;\n//   submitted = false;\n\n\n//   isAdd: boolean;\n\n//   constructor(public activeModal: NgbActiveModal,\n//     private _router: Router,\n//     private _formBuilder: FormBuilder,\n//     private modalService: NgbModal,\n//     private notificationService: NotificationService,\n//     private toastService: ToastrService) { }\n//   ngOnInit() {\n//     this.buildUserForm();\n\n//   }\n\n//   get f() {\n//     return this.notificationForm.controls;\n//   }\n//   buildUserForm() {\n//     this.notificationForm = this._formBuilder.group({\n//       emailId: ['', [Validators.pattern(/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/), Validators.required]],\n//       password: ['', [Validators.required]],\n//       fullName: ['', [Validators.required]],\n//       deviceToken: ['', [Validators.required]],\n//       deviceType: ['', [Validators.required]],\n//       gender: '',\n\n\n//     });\n//   }\n//   addNotification() {\n\n//     if (this.isAdd) {\n//       var addObj = {\n//         \"emailId\": this.notificationForm.controls['emailId'].value,\n//         \"password\": this.notificationForm.controls['password'].value,\n\n//         \"fullName\": this.notificationForm.controls['fullName'].value,\n//         \"deviceToken\": this.notificationForm.controls['deviceToken'].value,\n//         \"deviceType\": this.notificationForm.controls['deviceType'].value,\n\n//         \"gender\": this.notificationForm.controls['gender'].value,\n\n\n//       }\n//       this.notificationService.addUser(addObj).subscribe(\n//         data => {\n//           this.getAllUser();\n//           this.activeModal.dismiss();\n\n//           this.toastService.success(data['response'].responseMessage);\n//         },\n//         error => {\n\n//           this.toastService.error(error['response'].responseMessage);\n//         });\n//     } else {\n//       var editObj = {\n//         \"emailId\": this.notificationForm.controls['emailId'].value,\n//         \"password\": this.notificationForm.controls['password'].value,\n\n//         \"fullName\": this.notificationForm.controls['fullName'].value,\n//         \"deviceToken\": this.notificationForm.controls['deviceToken'].value,\n//         \"deviceType\": this.notificationForm.controls['deviceType'].value,\n\n//         \"gender\": this.notificationForm.controls['gender'].value,\n\n\n//       }\n//       console.log(' edit user id', this.id)\n//       this.notificationService.editUser(editObj, this.id).subscribe(\n//         data => {\n//           this.getAllUser();\n//           this.activeModal.dismiss();\n//           console.log('dataaaaaa', data);\n//           this.toastService.success(data['response'].responseMessage);\n//         },\n//         error => {\n//           console.log('error' + error)\n//           this.toastService.error(error['errors'].message);\n//         });\n//     }\n//   }\n//   getAllUser() {\n//     this.notificationService.getAllUsers().subscribe((response: any) => {\n//       this.notificationService.setUsers(response);\n//     })\n//   }\n//   validateForm() {\n//     if (this.notificationForm.valid) {\n//       return false;\n//     } else {\n//       return true;\n//     }\n//   }\n//   onSubmit() {\n//     this.submitted = true;\n\n//     // stop here if form is invalid\n//     if (this.notificationForm.invalid) {\n//       return;\n//     }\n\n//     this.loading = true;\n//   }\n\n\n\n// }\n\n\n\n@Component({\n  selector: 'app-notifications',\n  templateUrl: './notifications.component.html',\n  styleUrls: ['./notifications.component.css']\n})\nexport class NotificationsComponent implements OnInit {\n  notificationList: any;\n  notificationLists: Array<any>;\n  notificationForm: FormGroup;\n  loading = false;\n  submitted = false;\n\n  constructor(private modalService: NgbModal,\n    private toastService: ToastrService,\n    private _formBuilder: FormBuilder,\n    private notificationService: NotificationService) {\n\n    this.notificationService.getAllNotifications().subscribe((data: any) => {\n      let blankArray = []\n      for (let i in data.response.result[0]) {\n        let obj = {\n          name: i\n        };\n        for (let k in data.response.result[0][i]) {\n          obj[k] = data.response.result[0][i][k]\n        }\n        blankArray.push(obj);\n      }\n      this.notificationList = blankArray\n\n    })\n  }\n\n  ngOnInit() {\n    this.getAllNotifications();\n  }\n\n  updateNotificationModel(obj) {\n    // var editObj = {\n    //   \"name\": this.notificationForm.controls['name'].value,\n    //   \"content\": this.notificationForm.controls['content'].value,\n    //   \"flag\": this.notificationForm.controls['flag'].value,\n    //   \"isActive\": this.notificationForm.controls['isActive'].value\n\n    // }\n    var editObj = obj;\n    console.log(editObj);\n    this.notificationService.updateNotifications(editObj).subscribe(\n      data => {\n        this.toastService.success(data['response'].responseMessage);\n        this.getAllNotifications();\n      },\n      error => {\n        this.toastService.error(error['error'].message);\n      });\n  }\n\n  validateForm() {\n    if (this.notificationForm.valid) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  getAllNotifications() {\n    this.notificationService.getAllNotifications().subscribe((response: any) => {\n      this.notificationService.setNotifications(response.response.result);\n    })\n  }\n\n  get f() {\n    return this.notificationForm.controls;\n  }\n\n  onSubmit() {\n    this.submitted = true;\n    if (this.notificationForm.invalid) {\n      return;\n    }\n    this.loading = true;\n  }\n\n  open(obj) {\n\n  }\n}\n","import { NotificationService } from './notifications.service';\nimport { NotificationsRoutingModule } from './notifications.routing';\nimport { NotificationsComponent } from './notifications.component';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RouterModule, Routes } from '@angular/router';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { DefaultComponent } from '../../default.component';\nimport { NgxEditorModule } from 'ngx-editor';\nimport { LayoutModule } from '../../../../layouts/layout.module';\n\n\nconst routes: Routes = [{\n\tpath: \"\",\n\tcomponent: DefaultComponent,\n\tchildren: [{\n\t\tpath: \"\",\n\t\tcomponent: NotificationsComponent\n\t}]\n}];\n\n@NgModule({\n\timports: [\n\t\tCommonModule, RouterModule.forChild(routes),\n\t\tLayoutModule,\n\t\tNotificationsRoutingModule,\n\t\tNgxEditorModule,\n\t\tNgbModule.forRoot(),\n\t\tFormsModule,\n\t\tReactiveFormsModule\n\t],\n\texports: [NotificationsComponent],\n\tdeclarations: [\n\t\tNotificationsComponent],\n\tproviders: [NotificationService],\n\tentryComponents: []\n})\nexport class NotificationsModule {\n}\n","import { NotificationsComponent } from './notifications.component';\nimport { DefaultComponent } from './../../default.component';\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { Router, ActivatedRoute, Params } from '@angular/router';\n\nconst routes: Routes = [{\n    path: \"\",\n    component: DefaultComponent,\n    children: [\n        {\n            path: '',\n            component: NotificationsComponent,\n\n        }]\n}]\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [],\n    providers: []\n})\n\nexport class NotificationsRoutingModule { }\n","import { Subject } from 'rxjs/Subject';\nimport { Injectable, EventEmitter } from '@angular/core';\nimport { HttpHeaders, HttpClient } from '@angular/common/http';\nimport { map, catchError } from \"rxjs/operators\";\nimport { Observable, throwError } from 'rxjs';\n\nconst URL: string = \"http://66.70.179.133:4009/solow/v2/api/admin\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NotificationService {\n  private notificationList = new Subject<any>()\n  constructor(private http: HttpClient) { }\n\n\n  setNotifications(data: any) {\n    this.notificationList.next({ notificationList: data });\n  }\n \n  getHeaderWithToken() {\n    let headers = new HttpHeaders()\n    headers = headers.set('Content-Type', 'application/json')\n    headers = headers.set('Authorization', JSON.parse(localStorage.getItem('jwt')))\n\n    return headers;\n  }\n  \n  getAllNotifications() {\n    return this.http.get(URL + '/getNotificationModel', { headers: this.getHeaderWithToken() })\n      .pipe(\n        map((res: Response) => { return res })\n      );\n  }\n\n\n  updateNotifications(user: any) {\n\n    return this.http.put<any>(URL + '/updateNotificationModel', user, { headers: this.getHeaderWithToken() })\n      .pipe(\n        map((res: Response) => { return res }),\n      );\n  }\n \n}\n"],"sourceRoot":""}