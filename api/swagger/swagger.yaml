swagger: "2.0"
info:
  title: "DeliSOS"
  version: "1.0.0"
host: "66.70.179.133:8080"
consumes:
- "application/json"
- "application/x-www-form-urlencoded"
produces:
- "application/json"
schemes:
- "http"
tags:
  - name: user
    description: "user api"
  - name: admin
    description: "admin api"
paths:
  "/user/login":
      post:
        tags:
        - 'user'
        summary: Authenticating user
        parameters: 
          - in: body
            name: user
            description: login user.
            required: true
            schema:
              type: object
              required:
                - email
                - password
                - deviceId
                - deviceType
                - fcmToken
                - latitude
                - longitude
              properties:
                email:
                    type: string
                password:
                    type: string
                deviceId:
                    type: string
                deviceType:
                    type: string
                fcmToken:
                    type: string
                latitude:
                    type: string
                    description: 'The value must be between -90 to 90'
                longitude:
                    type: string
                    description: 'The value must be between -180 to 180'    
        responses:
          "200":
            description: Sucessfully login
            schema:
              $ref: '#/definitions/SuccessMessage'
          "400":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
          "500":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
          "404":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'     

  "/user/signUp":
      post:
        tags:
        - 'user'
        summary: Registering new user.
        parameters: 
          - in: body
            name: user
            description: register in body.
            required: true
            schema:
              type: object
              required:
                - email
                - password
                - name  
                - deviceId
                - deviceType
                - fcmToken
              properties:
                name:
                    type: string
                email:
                    type: string
                password:
                    type: string
                    format: One capital letter,small letter,special char and one number is required.Length lies between 6 to 16
                deviceId:
                    type: string
                deviceType:
                    type: string
                fcmToken:
                    type: string
        responses:
          "201":
            description: Sucessfully registered.
            schema:
              $ref: '#/definitions/SuccessMessage'
          "400":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
          "500":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
          "404":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
  
  "/user/socialLogin":
      post:
        tags:
        - 'user'
        summary: login user by social account.
        parameters: 
          - in: body
            name: user
            description: login via social id.
            required: true
            schema:
              type: object
              required:
                - socialId
                - name  
                - deviceId
                - deviceType
                - fcmToken
                - latitude
                - longitude
              properties:
                name:
                    type: string
                socialId:
                    type: string
                deviceId:
                    type: string
                deviceType:
                    type: string
                fcmToken:
                    type: string
                latitude:
                    type: string
                    description: 'The value must be between -90 to 90'
                longitude:
                    type: string
                    description: 'The value must be between -180 to 180'                    
        responses:
          "200":
            description: Sucessfully Login.
            schema:
              $ref: '#/definitions/SuccessMessage'
          "400":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
          "500":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
  
  "/user/forgotPassword":
      post:
        tags:
        - 'user'
        summary: send new password via email to user.
        parameters: 
          - in: body
            name: user
            description: email for get new password.
            required: true
            schema:
              type: object
              required:
                - email 
              properties:
                email:
                    type: string
        responses:
          "200":
            description: mail sent
            schema:
              $ref: '#/definitions/SuccessMessage'
          "400":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
          "500":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
          "404":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'  
          "501":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage' 
            
  "/user/changePassword":
      post:
        tags:
        - 'user'
        summary: change the password of logged in user.
        parameters:
          - name: authorization
            in: header
            description: token for validation.
            required: true
            type: string
          - in: body
            name: user
            description: old password and new password for authenticate and change.
            required: true
            schema:
              type: object
              required:
                - oldPassword
                - newPassword
              properties:
                oldPassword:
                    type: string
                newPassword:
                    type: string
        responses:
          "200":
            description: mail sent
            schema:
              $ref: '#/definitions/SuccessMessage'
          "400":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
          "500":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
          "404":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
              
  "/user/showProfile":
      get:
        tags:
        - 'user'
        summary: get profile of logged in user.
        
        parameters: 
          - name: authorization
            in: header
            description: token for validation.
            required: true
            type: string
              
        responses:
          "200":
            description: ok
            schema:
              $ref: '#/definitions/SuccessMessage'
          "500":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
          "404":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
          "400":
            description: Error message.
            schema:
              $ref: '#/definitions/errorMessage'
  
            
  "/user/getUserDetail/{id}":
      get:
        tags:
        - 'user'
        summary: get detail for particular user.
        parameters: 
          - name: id
            in: path
            description: user id for get details.
            required: true
            type: string
            
          - name: authorization
            in: header
            description: token for validation.
            required: true
            type: string
            
        
        responses:
          "200":
            description: ok
            schema:
              $ref: '#/definitions/SuccessMessage'
          "500":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
          "404":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
          "400":
            description: Error message.
            schema:
              $ref: '#/definitions/errorMessage'
  
  "/user/uploadPhoto":
      post:
        tags:
        - 'user'
        summary: Upload Image Api.
        parameters: 
          - in: formData
            name: img
            description: Select image ,You can also select multiple images at a time,the maximum limit is 5.
            required: true
            type: file
        responses:
          "201":
            description: image uploaded
            schema:
              $ref: '#/definitions/SuccessMessage'
          "500":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
          "400":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
  
  "/user/addRestaurant":
      post:
        tags:
        - 'user'
        summary: Propose a new restaurant to Admin.
        parameters: 
          - name: user
            in: body
            description: Register restaurant object
            required: true
            schema:
              type: object
              required:
                - name
                - description
                - latitude
                - longitude
                - openTime
                - closeTime
                - cuisin
                - menu
                - perPersonCost
              properties:
                name:
                    type: string
                description:
                    type: string
                latitude:
                    type: string
                longitude:
                    type: string
                openTime:
                    type: string
                closeTime:
                    type: string
                photos:
                    type: array
                    items:
                      type: string
                mealOffers:
                    type: string
                    enum:
                    - BREAKFAST
                    - LUNCH
                    - DINNER
                    - ALL
                cuisin:
                    $ref: '#/definitions/cuisinArray'
                contactNumber:
                    type: number
                website:
                    type: string
                menu:
                    type: array
                    items:
                      type: string
                perPersonCost:
                      type: number
                
                
          - name: authorization
            in: header
            description: token for validation.
            required: true
            type: string
              
        responses:
          "201":
            description: add request sent
            schema:
              $ref: '#/definitions/SuccessMessage'
          "500":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
          "400":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'

  "/user/getRestaurantDetail/{id}":
      get:
        tags:
        - 'user'
        summary: Get detail for particular restaurant.
        parameters: 
          - name: id
            in: path
            description: Restaurant id for details.
            required: true
            type: string
          - name: authorization
            in: header
            description: token for authorization.
            required: true
            type: string
            
        responses:
          "200":
            description: ok
            schema:
              $ref: '#/definitions/SuccessMessage'
          "500":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
          "404":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
          "400":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
              
  "/user/getRestaurantList":
      get:
        tags:
        - 'user'
        summary: get list of all restaurant.
        parameters: 
          - name: authorization
            in: header
            description: token for authorization.
            required: true
            type: string
            
              
        responses:
          "200":
            description: ok
            schema:
              $ref: '#/definitions/SuccessMessage'
          "500":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
          "404":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
          "400":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
 
  "/user/addReview":
      post:
        tags:
        - 'user'
        summary: add review for particular restaurant.
        parameters: 
            
          - name: authorization
            in: header
            description: token for validation.
            required: true
            type: string
            
          - name: user
            in: body
            description: details of review.
            required: true
            schema: 
              type: object
              required: 
                - restId
                - userId
                - content
                - likePlace
                - rating
                - improvementArea
              properties:
                restId:
                    type: string
                    description: Restaurant id for adding review
                userId:
                    type: string
                    description: User id who is adding the review
                content:
                    type: string
                    description: Review content
                likePlace:
                    type: string
                    enum: 
                      - WORST
                      - BAD
                      - OKAY
                      - GOOD
                      - GREAT
                rating:
                    type: number
                    description: Rating givent to restaurant by user.
                improvementArea:
                    type: string
                    
        responses:
          "201":
            description: created
            schema:
              $ref: '#/definitions/SuccessMessage'
          "500":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
          "404":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
          "400":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
 
  "/user/updateReview/{id}":
      put:
        tags:
        - 'user'
        summary: update particular review.
        parameters: 
            
          - name: authorization
            in: header
            description: token for validation.
            required: true
            type: string
          - name: id
            in: path
            description: Review id for update particular review.
            required: true
            type: string
            
          - name: user
            in: body
            description: details of review.
            required: true
            schema: 
              type: object
              required: 
                - content
                - likePlace
                - rating
                - improvementArea
              properties:
                content:
                    type: string
                    description: Updated content for the review.
                likePlace:
                    type: string
                    enum: 
                      - WORST
                      - BAD
                      - OKAY
                      - GOOD
                      - GREAT
                rating:
                    type: number
                    description: Rating givent to restaurant by user.
                improvementArea:
                    type: string
                    
        responses:
          "200":
            description: ok
            schema:
              $ref: '#/definitions/SuccessMessage'
          "500":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
          "404":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
          "400":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
  
  "/user/deleteReview/{id}":
      get:
        tags:
        - 'user'
        summary: Delete particular review.
        parameters: 
          - name: id
            in: path
            description: review id for delete review.
            required: true
            type: string
          - name: authorization
            in: header
            description: token for validation.
            required: true
            type: string
            
              
        responses:
          "200":
            description: ok
            schema:
              $ref: '#/definitions/SuccessMessage'
          "500":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
          "404":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
          "400":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
   
  "/user/getAllReviews/{restId}":
      get:
        tags:
        - 'user'
        summary: Get all reviews.
        parameters: 
          - name: restId
            in: path
            description: The review will be listed for the restaurant id you provide.
            required: true
            type: string
          - name: authorization
            in: header
            description: token for validation.
            required: true
            type: string
            
              
        responses:
          "200":
            description: ok
            schema:
              $ref: '#/definitions/SuccessMessage'
          "500":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
          "404":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
          "400":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
              
  "/user/getNearByRestaurant/{userId}":
      get:
        tags:
        - 'user'
        summary: Get nearby restaurant ,the maximumk distance is set to 10Km.
        parameters: 
          - in: path
            name: userId
            description: User id of the user ,accessing this api.
            required: true
            type: string
          - name: authorization
            in: header
            description: token for validation.
            required: true
            type: string
        
        responses:
          "201":
            description: Sucessfully registered.
            schema:
              $ref: '#/definitions/SuccessMessage'
          "400":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
          "500":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'              
 
  "/admin/login":
      post:
        tags:
        - 'admin'
        summary: Authenticating user
        parameters: 
          - in: body
            name: admin
            description: login admin.
            required: true
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                    type: string
                password:
                    type: string
        responses:
          "200":
            description: Sucessfully login
            schema:
              $ref: '#/definitions/SuccessMessage'
          "400":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
          "500":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
          "404":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'             
              
  "/admin/signUp":
      post:
        tags:
        - 'admin'
        summary: Registering new admin.
        parameters: 
          - in: body
            name: admin
            description: register in body.
            required: true
            schema:
              type: object
              required:
                - email
                - password
                - name  
              properties:
                name:
                    type: string
                email:
                    type: string
                password:
                    type: string
                    format: One capital letter,small letter,special char and one number is required.Length lies between 6 to 16
        responses:
          "201":
            description: Sucessfully registered.
            schema:
              $ref: '#/definitions/SuccessMessage'
          "400":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
          "500":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
          "404":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
  
  "/admin/socialLogin":
      post:
        tags:
        - 'admin'
        summary: login admin by social account.
        parameters: 
          - in: body
            name: admin
            description: login via social id.
            required: true
            schema:
              type: object
              required:
                - socialId
                - name  
                - isSocialLogin
              properties:
                name:
                    type: string
                socialId:
                    type: string
                isSocialLogin:
                    type: boolean
        responses:
          "200":
            description: Sucessfully Login.
            schema:
              $ref: '#/definitions/SuccessMessage'
          "400":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
          "500":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
              
  "/admin/forgotPassword":
      post:
        tags:
        - 'admin'
        summary: send new password via email to user.
        parameters: 
          - in: body
            name: admin
            description: email for get new password.
            required: true
            schema:
              type: object
              required:
                - email 
              properties:
                email:
                    type: string
        responses:
          "200":
            description: mail sent
            schema:
              $ref: '#/definitions/SuccessMessage'
          "400":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
          "500":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
          "404":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'  
          "501":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage' 
  
  "/admin/getUserList":
      get:
        tags:
        - 'admin'
        summary: get detail of each user.
        parameters:
          - name: authorization
            in: header
            description: token for validation.
            required: true
            type: string
              
        responses:
          "200":
            description: ok
            schema:
              $ref: '#/definitions/SuccessMessage'
          "500":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
              
  "/admin/getUserDetail/{id}":
      get:
        tags:
        - 'admin'
        summary: get detail for particular user.
        parameters: 
          - name: id
            in: path
            description: user id for get details.
            required: true
            type: string
            
          - name: authorization
            in: header
            description: token for validation.
            required: true
            type: string
              
        responses:
          "200":
            description: ok
            schema:
              $ref: '#/definitions/SuccessMessage'
          "500":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
          "404":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
          "400":
            description: Error message.
            schema:
              $ref: '#/definitions/errorMessage'
                
  "/admin/addUser":
      post:
        tags:
        - 'admin'
        summary: Registering new user.
        parameters: 
          - name: authorization
            in: header
            description: token for validation.
            required: true
            type: string
          - in: body
            name: admin
            description: register in body.
            required: true
            schema:
              type: object
              required:
                - email
                - password
                - name  
              properties:
                name:
                    type: string
                email:
                    type: string
                password:
                    type: string
                    format: One capital letter,small letter,special char and one number is required.Length lies between 6 to 16
        responses:
          "201":
            description: Sucessfully registered.
            schema:
              $ref: '#/definitions/SuccessMessage'
          "400":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
          "500":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
               
  "/admin/updateUser/{id}":
      put:
        tags:
        - 'admin'
        summary: update details of user.
        parameters: 
          - name: id
            in: path
            description: user id for get details.
            required: true
            type: string
            
          - in: body
            name: admin
            description: update in body.
            required: true
            schema:
              type: object
              required:
                - name  
                - profilePicture
              properties:
                name:
                    type: string
                profilePicture:
                    type: string
                    
          - name: authorization
            in: header
            description: token for validation.
            required: true
            type: string
      
        responses:
          "200":
            description: Sucessfully updated.
            schema:
              $ref: '#/definitions/SuccessMessage'
          "400":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
          "500":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
          "404":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
            
  "/admin/addRestaurant":
      post:
        tags:
        - 'admin'
        summary: add new restaurant.
        parameters: 
          - name: restaurant
            in: body
            description: register restaurant in body.
            required: true
            schema:
              type: object
              required:
                - name
                - description
                - latitude
                - longitude
                - openTime
                - closeTime
                - cuisin
                - menu
                - perPersonCost
              properties:
                name:
                    type: string
                description:
                    type: string
                latitude:
                    type: string
                longitude:
                    type: string
                openTime:
                    type: string
                closeTime:
                    type: string
                photos:
                    type: array
                    items:
                      type: string
                mealOffers:
                    type: string
                    enum:
                    - BREAKFAST
                    - LUNCH
                    - DINNER
                    - ALL
                cuisin:
                    $ref: '#/definitions/cuisinArray'
                contactNumber:
                    type: string
                website:
                    type: string
                menu:
                    type: array
                    items:
                      type: string
                perPersonCost:
                    type: number
                
          - name: authorization
            in: header
            description: token for validation.
            required: true
            type: string
              
        responses:
          "201":
            description: add request sent
            schema:
              $ref: '#/definitions/SuccessMessage'
          "500":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
          "400":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
  
  "/admin/getRestaurantDetails/{id}":
      get:
        tags:
        - 'admin'
        summary: get detail for particular restaurant.
        parameters: 
          - name: id
            in: path
            description: restaurant id for get details.
            required: true
            type: string
            
          - name: authorization
            in: header
            description: token for validation.
            required: true
            type: string
            
            
              
        responses:
          "200":
            description: ok
            schema:
              $ref: '#/definitions/SuccessMessage'
          "500":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
          "404":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
          "400":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'

  "/admin/getRestaurantList":
      get:
        tags:
        - 'admin'
        summary: get detail for particular restaurant.
        parameters: 
        
          - name: authorization
            in: header
            description: token for validation.
            required: true
            type: string
            
            
              
        responses:
          "200":
            description: ok
            schema:
              $ref: '#/definitions/SuccessMessage'
          "500":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
          "400":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'

  "/admin/updateRestaurant/{id}":
      put:
        tags:
        - 'admin'
        summary: update restaurant details.
        parameters: 
          - name: id
            in: path
            description: user id for get details.
            required: true
            type: string
            
          - name: restaurant
            in: body
            description: register restaurant in body.
            required: true
            schema:
              type: object
              required:
                - name
                - description
                - latitude
                - longitude
                - openTime
                - closeTime
                - cuisin
                - menu
                - perPersonCost
                - editedBy
              properties:
                name:
                    type: string
                description:
                    type: string
                latitude:
                    type: string
                longitude:
                    type: string
                openTime:
                    type: string
                closeTime:
                    type: string
                photos:
                    type: array
                    items:
                      type: string
                mealOffers:
                    type: string
                    enum:
                    - BREAKFAST
                    - LUNCH
                    - DINNER
                    - ALL
                cuisin:
                    $ref: '#/definitions/cuisinArray'
                contactNumber:
                    type: string
                website:
                    type: string
                menu:
                    type: array
                    items:
                      type: string
                perPersonCost:
                    type: number
                editedBy:
                    type: string
                
          - name: authorization
            in: header
            description: token for validation.
            required: true
            type: string
              
        responses:
          "201":
            description: add request sent
            schema:
              $ref: '#/definitions/SuccessMessage'
          "500":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
          "400":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
              
  "/admin/deleteRestaurant/{id}":
      get:
        tags:
        - 'admin'
        summary: delete particular restaurant.
        parameters: 
          - name: id
            in: path
            description: restaurant id for get details.
            required: true
            type: string
            
          - name: authorization
            in: header
            description: token for validation.
            required: true
            type: string
            
            
              
        responses:
          "200":
            description: ok
            schema:
              $ref: '#/definitions/SuccessMessage'
          "500":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
          "404":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
          "400":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'

  "/admin/uploadPhoto":
      post:
        tags:
        - 'admin'
        summary: upload image and get url of it.
        parameters: 
          - in: body
            name: user
            description: base64 for get image url.
            required: true
            schema:
              type: object
              required:
                - file 
              properties:
                file:
                    type: string
        responses:
          "201":
            description: image uploaded
            schema:
              $ref: '#/definitions/SuccessMessage'
          "500":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
          "400":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
        
  "/admin/deleteRestaurantPhoto":
      post:
        tags:
        - 'admin'
        summary: delete photo of particular restaurant.
        parameters: 
          - in: body
            name: user
            description: register in body.
            required: true
            schema:
              type: object
              required:
                - restId
                - url
              properties:
                restId:
                    type: string
                url:
                    type: string
          
          - name: authorization
            in: header
            description: token for validation.
            required: true
            type: string
        
        responses:
          "201":
            description: Sucessfully registered.
            schema:
              $ref: '#/definitions/SuccessMessage'
          "400":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
          "500":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
  "/admin/approveRestaurantProposal/{restaurant_id}":
      get:
        tags:
        - 'admin'
        summary: Approve particular restaurant approval request.
        parameters: 
          - in: path
            name: restaurant_id
            description: The restaurant id to approve.
            required: true
            type: string
          - name: authorization
            in: header
            description: token for validation.
            required: true
            type: string
        
        responses:
          "201":
            description: Success.
            schema:
              $ref: '#/definitions/SuccessMessage'
          "400":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'
          "500":
            description: Erorr message.
            schema:
              $ref: '#/definitions/errorMessage'              
              
            
definitions:
  errorMessage:
    type: "object"
    properties:
      code:
        type: "integer"
      messgae:
        type: "string"
    
  SuccessMessage:
    type: "object"
    properties:
      code:
        type: "integer"
      messgae:
        type: "string"  
    
  cuisinArray:
    type: array
    items: 
      type: object
      required:
        - name
        - image
      properties:
        name:
          type: string
        image:
          type: string
  
    
    
    
    
    
    
    
          